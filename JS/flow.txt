function listenForRemoteEvents( val, delay ) {
  add heard event to list;
  if none are scheduled, schedule the first with a delay
}

function handleNextRemoteEvent() {
  Execute first;
  if there's another, schedule next in timestamp / playBackSpeed
}

// Create a new room, of which you are admin.
// First, an entry is made in the /rooms DB branch with the local user as owner.
// Entries are made for messages and settings,
// room deletion is scheduled if the local user disconnects.

// Join an existing room as spectator.
// Start listening to admin's keypresses, ignoring past ones.
// Start listening to admin's settings and comply. (local settings locked)
// Listen to the room's presence in the list and leave if it is removed.

// Leave the current room.
// If spectating, stop listening to any branches related to the room.
// If leaving the room as admin, confirmation is required;
// all branches are removed leaving the rooms/ branch last:
// that one is used by the DB to check that the removal requests come from admin.

// Retrieve the data for one tutorial (in bunch) and store it in variables.
// Update the graphic interface and start the first tutorial step.
